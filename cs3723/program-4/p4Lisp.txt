;;; adds an expression to the diagnosis hash table
(defmacro diag (did &rest ex)
	`(putp ' ,did diag-HT ' ,ex) )

;;; adds an expression to the isa hash table
(defmacro isa (expr type)
	`(putp ' ,expr isa-HT  ' ,type ) )

(defmacro symptom (&rest expr)
    `(COND ((getp ' ,expr isa-HT) (putp ',expr symptom-HT ' T) (putp (list (getp ' ,expr isa-HT)) symptom-HT T)) 
        (T (putp ' ,expr symptom-HT ' T))
    )
)

;;;recursive call of printWOP that prints a list without parentheses
(defun printWOPRec (L)
        (cond ( (NULL L)  )
            (T (princ (CAR L))(princ " ")(printWOPRec (CDR L)))) )

;;;prints a list
(defun printWOP (L)
	(cond ( (ATOM L) (princ L))
		(T (printWOPRec L)) )
       	(cond (T T)) )

;;;prints the tree through the recursive call
(defun printTree (id)
	(printTreeRec id 0 "") )

;;;indents the tree according to the position
(defun indent (x)
	(if (NOT (ZEROP x) ) 
		(progn
			(princ " ")
			(indent (- x 1)) ) 
		 ))

;;;Recursive call of print Tree that goes through printing all of the tree with the appropriate quetions
(defun printTreeRec (id count side)
	(cond ( (NULL id) NIL) 
		( (if (getp id question-HT)
			(progn
				(terpri)
				(indent count)
				(printWOP `(,side ,id "Question: " )) 
				(printWOP (cddr (getp id question-HT)))
				(princ "?")) 
			(progn
				(terpri)
				(indent count)
				(printWOP `(,side ,id "Diagnosis: "))
				(printWOP (getp id diag-HT)) ) )  
		(printTreeRec (car (getp id question-HT)) (+ count 4) "Y:")
		(printTreeRec (cadr (getp id question-HT)) (+ count 4) "N:") ) ) )

;;;;Recursive call of triage
(defun triageRec(id)

  (PROG(result)
       (setf result (getp id question-ht))
       
       (COND (result
                  (cond((getp (append (cddr result) ()) symptom-ht)
                        (printWOP (list "id:" id result "Y"))(terpri)
                        (triageRec (car result)))
                      (T (printWOP (list "id:" id result "N"))(terpri)
                        (triageRec (cadr result)))
                   )
             )  
             (T
                (princ (getp id diag-ht))
             )
       )
   )

)

;;;starts the recursive call of triage at the root to fine the diagnosis based on the symptoms
(defun triage()
	(terpri)
    (triageRec root)
	(terpri)
)