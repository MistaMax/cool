;;; diag
(defmacro diag (did &rest ex)
	`(putp ' ,did diag-HT ' ,ex) )

;;; isa
(defmacro isa (expr type)
	`(putp ' ,expr isa-HT  ' ,type ) )

;;; symptom
(defmacro symptom (&rest symp)
	(putp symp symptom-HT T)
	(setf key (getp symp isa-HT))
	(cond ( (NOT (NULL key) ) (putp key symptom-HT T) )) )

;;;printW
;;;		Parameters:
;;;			L - a list of items to print
;;;		Purpose:
;;;			used with printWOP to recursively 
;;;			print the values in a list
(defun printW (L)
        (cond ( (NULL L)  )
            (T (princ (CAR L))(princ " ")(printW (CDR L)))) )

;;;printWOP
;;;		Parameters:
;;;			L - a list of items to print
;;;		Purpose:
;;;			Print the values of the list without parentheses
(defun printWOP (L)
	(cond ( (ATOM L) (princ L))
		(T (printW L)) )
       	(cond (T T)) )

;;;printTree
;;;
;;;
;;;
(defun printTree (id)
	(printTreeHelper id 0 "") )

;;;indent 
;;;
;;;
(defun indent (x)
	(if (NOT (ZEROP x) ) 
		(progn
			(princ " ")
			(indent (- x 1)) ) 
		 ))

;;;printTreeHelper
;;;
;;;
;;;FINISHED
(defun printTreeHelper (id space side)
	(cond ( (NULL id) NIL) 
		( (if (getp id question-HT)
			(progn
				(terpri)
				(indent space)
				(printWOP `(,side ,id "Question: " )) 
				(printWOP (cddr (getp id question-HT)))
				(princ "?")) 
			(progn
				(terpri)
				(indent space)
				(printWOP `(,side ,id "Diagnosis: "))
				(printWOP (getp id diag-HT)) ) )  
		(printTreeHelper (car (getp id question-HT)) (+ space 4) "Y:")
		(printTreeHelper (cadr (getp id question-HT)) (+ space 4) "N:") ) ) )

;;;triage 
;;;
;;; NOT FINISHED
;;;
(defun triage ()
	(cond ( (getp 'Q1 question-HT) )
		(if (getp (car (getp key question-HT)) symptom-HT)
			(printWOP `("ID: " ,key ,(getp key question-HT) "Y")) ) ) )
