(defun repeat (A N)
    (COND ((ZEROP N) NIL)
        (T  (CONS A (repeat A (- N 1))))
    )
)

(defun duplicate (L)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) 2)
                            (duplicate (CDR L))
                        )
        )
        (T (CONS (CAR L) (duplicate (CDR L))))
    )
)

(defun duplicateN (L N)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) N)
                            (duplicateN (CDR L) N)
                        )
        )
        (T (CONS (CAR L) (duplicateN (CDR L) N)))
    )
)

(defun duplicateDeep (L)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) 2)
                            (duplicateDeep (CDR L))
                        )
        )
        ((LIST (CAR L))(CONS
                            (duplicateDeep (CAR L))
                            (duplicateDeep (CDR L))
                       )
        )
        (T (CONS (CAR L) (duplicateDeep (CDR L))))
    )
)

(defun printWOP (L)
    (COND ((NULL L) NIL)
            ((ATOM (CAR L)) (PRINC (CAR L) PRINC " " (printWOP (CDR L)))
            )
            (T (PRINC "T"))
    )
)

(defun evalEach (L)
    (COND ((NULL L) NIL)
        ()
        (T ())
    )
)