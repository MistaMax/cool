;;;repeats an atom n times
(defun repeat (A N)
    (COND ((ZEROP N) NIL)
        (T  (CONS A (repeat A (- N 1))))
    )
)
;;;duplicates every atom in a list L
(defun duplicate (L)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) 2)
                            (duplicate (CDR L))
                        )
        )
        (T (CONS (CAR L) (duplicate (CDR L))))
    )
)
;;;duplicates every atom in the top list L N times
(defun duplicateN (L N)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) N)
                            (duplicateN (CDR L) N)
                        )
        )
        (T (CONS (CAR L) (duplicateN (CDR L) N)))
    )
)
;;;duplicates every atom in a list through all sublists
(defun duplicateDeep (L)
    (COND ((NULL L) NIL)
        ((ATOM (CAR L))(APPEND
                            (repeat (CAR L) 2)
                            (duplicateDeep (CDR L))
                        )
        )
        ((LIST (CAR L))(CONS
                            (duplicateDeep (CAR L))
                            (duplicateDeep (CDR L))
                       )
        )
        (T (CONS (CAR L) (duplicateDeep (CDR L))))
    )
)

;;;the recursive function used to scan through a list and print it
(defun printWOP2 (L)
    (COND ((NULL L) NIL)
        (T (PRINC (CAR L)) (PRINC " ") (printWOP2 (CDR L)))
    )
)
;;;prints a list out
(defun printWOP (L)
    (terpri)
    (COND ((ATOM L) (PRINC L))
            (T (printWOP2 L))
    )
    (terpri)
    (COND (T T))
)
;;;runs the code inside a list
(defun evalEach (L)
    (COND ((NULL L) NIL)
        ((NULL (CDR L)) (EVAL (CAR L)))
        (T (EVAL (CAR L)) (evalEach (CDR L)))
    )
)